// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	auth "auth-service/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, _a1
func (_m *AuthRepository) CreateAuth(ctx context.Context, _a1 auth.AuthRepo) (auth.AuthRepo, error) {
	ret := _m.Called(ctx, _a1)

	var r0 auth.AuthRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.AuthRepo) (auth.AuthRepo, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.AuthRepo) auth.AuthRepo); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(auth.AuthRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.AuthRepo) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuth provides a mock function with given fields: ctx, id
func (_m *AuthRepository) DeleteAuth(ctx context.Context, id string) {
	_m.Called(ctx, id)
}

// FetchAuth provides a mock function with given fields: ctx, id, email
func (_m *AuthRepository) FetchAuth(ctx context.Context, id string, email string) (auth.AuthRepo, error) {
	ret := _m.Called(ctx, id, email)

	var r0 auth.AuthRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (auth.AuthRepo, error)); ok {
		return rf(ctx, id, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) auth.AuthRepo); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Get(0).(auth.AuthRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuth provides a mock function with given fields: ctx, id, _a2
func (_m *AuthRepository) UpdateAuth(ctx context.Context, id string, _a2 auth.AuthRepo) (auth.AuthRepo, error) {
	ret := _m.Called(ctx, id, _a2)

	var r0 auth.AuthRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.AuthRepo) (auth.AuthRepo, error)); ok {
		return rf(ctx, id, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.AuthRepo) auth.AuthRepo); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Get(0).(auth.AuthRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, auth.AuthRepo) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
