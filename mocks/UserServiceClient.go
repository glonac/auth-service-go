// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	userGrpc "auth-service/pkg/grpc/userGrpc"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// GetConsumerByClientAccountId provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetConsumerByClientAccountId(ctx context.Context, in *userGrpc.GetConsumerByClientAccountId_Request, opts ...grpc.CallOption) (*userGrpc.GetConsumerByClientAccountId_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetConsumerByClientAccountId_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetConsumerByClientAccountId_Request, ...grpc.CallOption) (*userGrpc.GetConsumerByClientAccountId_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetConsumerByClientAccountId_Request, ...grpc.CallOption) *userGrpc.GetConsumerByClientAccountId_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetConsumerByClientAccountId_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetConsumerByClientAccountId_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerByClientAccountId provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetSellerByClientAccountId(ctx context.Context, in *userGrpc.GetSellerByClientAccountId_Request, opts ...grpc.CallOption) (*userGrpc.GetSellerByClientAccountId_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetSellerByClientAccountId_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetSellerByClientAccountId_Request, ...grpc.CallOption) (*userGrpc.GetSellerByClientAccountId_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetSellerByClientAccountId_Request, ...grpc.CallOption) *userGrpc.GetSellerByClientAccountId_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetSellerByClientAccountId_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetSellerByClientAccountId_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellersByTags provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetSellersByTags(ctx context.Context, in *userGrpc.GetSellersByTags_Request, opts ...grpc.CallOption) (*userGrpc.GetSellersByTags_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetSellersByTags_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetSellersByTags_Request, ...grpc.CallOption) (*userGrpc.GetSellersByTags_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetSellersByTags_Request, ...grpc.CallOption) *userGrpc.GetSellersByTags_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetSellersByTags_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetSellersByTags_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByClientAccountId provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserByClientAccountId(ctx context.Context, in *userGrpc.GetUserByClientAccountId_Request, opts ...grpc.CallOption) (*userGrpc.GetUserByClientAccountId_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetUserByClientAccountId_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUserByClientAccountId_Request, ...grpc.CallOption) (*userGrpc.GetUserByClientAccountId_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUserByClientAccountId_Request, ...grpc.CallOption) *userGrpc.GetUserByClientAccountId_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetUserByClientAccountId_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetUserByClientAccountId_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUserById(ctx context.Context, in *userGrpc.GetUserById_Request, opts ...grpc.CallOption) (*userGrpc.GetUserById_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetUserById_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUserById_Request, ...grpc.CallOption) (*userGrpc.GetUserById_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUserById_Request, ...grpc.CallOption) *userGrpc.GetUserById_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetUserById_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetUserById_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersList provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetUsersList(ctx context.Context, in *userGrpc.GetUsersList_Request, opts ...grpc.CallOption) (*userGrpc.GetUsersList_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.GetUsersList_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUsersList_Request, ...grpc.CallOption) (*userGrpc.GetUsersList_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.GetUsersList_Request, ...grpc.CallOption) *userGrpc.GetUsersList_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.GetUsersList_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.GetUsersList_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterConsumer provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) RegisterConsumer(ctx context.Context, in *userGrpc.RegisterConsumer_Request, opts ...grpc.CallOption) (*userGrpc.RegisterConsumer_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.RegisterConsumer_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.RegisterConsumer_Request, ...grpc.CallOption) (*userGrpc.RegisterConsumer_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.RegisterConsumer_Request, ...grpc.CallOption) *userGrpc.RegisterConsumer_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.RegisterConsumer_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.RegisterConsumer_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSeller provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) RegisterSeller(ctx context.Context, in *userGrpc.RegisterSeller_Request, opts ...grpc.CallOption) (*userGrpc.RegisterSeller_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.RegisterSeller_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.RegisterSeller_Request, ...grpc.CallOption) (*userGrpc.RegisterSeller_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.RegisterSeller_Request, ...grpc.CallOption) *userGrpc.RegisterSeller_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.RegisterSeller_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.RegisterSeller_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsumer provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateConsumer(ctx context.Context, in *userGrpc.UpdateConsumer_Request, opts ...grpc.CallOption) (*userGrpc.UpdateConsumer_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.UpdateConsumer_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateConsumer_Request, ...grpc.CallOption) (*userGrpc.UpdateConsumer_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateConsumer_Request, ...grpc.CallOption) *userGrpc.UpdateConsumer_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.UpdateConsumer_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.UpdateConsumer_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSeller provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateSeller(ctx context.Context, in *userGrpc.UpdateSeller_Request, opts ...grpc.CallOption) (*userGrpc.UpdateSeller_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.UpdateSeller_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateSeller_Request, ...grpc.CallOption) (*userGrpc.UpdateSeller_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateSeller_Request, ...grpc.CallOption) *userGrpc.UpdateSeller_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.UpdateSeller_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.UpdateSeller_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSellerSetting provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateSellerSetting(ctx context.Context, in *userGrpc.UpdateSellerSetting_Request, opts ...grpc.CallOption) (*userGrpc.UpdateSellerSetting_Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userGrpc.UpdateSellerSetting_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateSellerSetting_Request, ...grpc.CallOption) (*userGrpc.UpdateSellerSetting_Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *userGrpc.UpdateSellerSetting_Request, ...grpc.CallOption) *userGrpc.UpdateSellerSetting_Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userGrpc.UpdateSellerSetting_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *userGrpc.UpdateSellerSetting_Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
