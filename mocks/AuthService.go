// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	auth "auth-service/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, _a1
func (_m *AuthService) CreateAuth(ctx context.Context, _a1 auth.AuthRepo) (auth.AuthRepo, error) {
	ret := _m.Called(ctx, _a1)

	var r0 auth.AuthRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.AuthRepo) (auth.AuthRepo, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.AuthRepo) auth.AuthRepo); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(auth.AuthRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.AuthRepo) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAuth provides a mock function with given fields: ctx, id, email
func (_m *AuthService) FetchAuth(ctx context.Context, id string, email string) (auth.AuthRepo, error) {
	ret := _m.Called(ctx, id, email)

	var r0 auth.AuthRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (auth.AuthRepo, error)); ok {
		return rf(ctx, id, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) auth.AuthRepo); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Get(0).(auth.AuthRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, id, email
func (_m *AuthService) ResetPassword(ctx context.Context, id string, email string) bool {
	ret := _m.Called(ctx, id, email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
