// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	auth "auth-service/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: _a0
func (_m *IAuthService) CreateAuth(_a0 auth.Auth) (auth.Auth, error) {
	ret := _m.Called(_a0)

	var r0 auth.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(auth.Auth) (auth.Auth, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(auth.Auth) auth.Auth); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(auth.Auth)
	}

	if rf, ok := ret.Get(1).(func(auth.Auth) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAuth provides a mock function with given fields: id, email
func (_m *IAuthService) FetchAuth(id string, email string) auth.Auth {
	ret := _m.Called(id, email)

	var r0 auth.Auth
	if rf, ok := ret.Get(0).(func(string, string) auth.Auth); ok {
		r0 = rf(id, email)
	} else {
		r0 = ret.Get(0).(auth.Auth)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: id, email
func (_m *IAuthService) ResetPassword(id string, email string) bool {
	ret := _m.Called(id, email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
