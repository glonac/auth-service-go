// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: protos/user-service/user.proto

// пакеты редко именуют camelCase-ом
package userGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserByClientAccountId(ctx context.Context, in *GetUserByClientAccountId_Request, opts ...grpc.CallOption) (*GetUserByClientAccountId_Response, error)
	GetUserById(ctx context.Context, in *GetUserById_Request, opts ...grpc.CallOption) (*GetUserById_Response, error)
	//CONSUMER
	GetConsumerByClientAccountId(ctx context.Context, in *GetConsumerByClientAccountId_Request, opts ...grpc.CallOption) (*GetConsumerByClientAccountId_Response, error)
	RegisterConsumer(ctx context.Context, in *RegisterConsumer_Request, opts ...grpc.CallOption) (*RegisterConsumer_Response, error)
	UpdateConsumer(ctx context.Context, in *UpdateConsumer_Request, opts ...grpc.CallOption) (*UpdateConsumer_Response, error)
	//SELLER
	GetSellerByClientAccountId(ctx context.Context, in *GetSellerByClientAccountId_Request, opts ...grpc.CallOption) (*GetSellerByClientAccountId_Response, error)
	GetSellersByTags(ctx context.Context, in *GetSellersByTags_Request, opts ...grpc.CallOption) (*GetSellersByTags_Response, error)
	RegisterSeller(ctx context.Context, in *RegisterSeller_Request, opts ...grpc.CallOption) (*RegisterSeller_Response, error)
	UpdateSeller(ctx context.Context, in *UpdateSeller_Request, opts ...grpc.CallOption) (*UpdateSeller_Response, error)
	UpdateSellerSetting(ctx context.Context, in *UpdateSellerSetting_Request, opts ...grpc.CallOption) (*UpdateSellerSetting_Response, error)
	//ADMIN
	GetUsersList(ctx context.Context, in *GetUsersList_Request, opts ...grpc.CallOption) (*GetUsersList_Response, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByClientAccountId(ctx context.Context, in *GetUserByClientAccountId_Request, opts ...grpc.CallOption) (*GetUserByClientAccountId_Response, error) {
	out := new(GetUserByClientAccountId_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetUserByClientAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *GetUserById_Request, opts ...grpc.CallOption) (*GetUserById_Response, error) {
	out := new(GetUserById_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetConsumerByClientAccountId(ctx context.Context, in *GetConsumerByClientAccountId_Request, opts ...grpc.CallOption) (*GetConsumerByClientAccountId_Response, error) {
	out := new(GetConsumerByClientAccountId_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetConsumerByClientAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterConsumer(ctx context.Context, in *RegisterConsumer_Request, opts ...grpc.CallOption) (*RegisterConsumer_Response, error) {
	out := new(RegisterConsumer_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/RegisterConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateConsumer(ctx context.Context, in *UpdateConsumer_Request, opts ...grpc.CallOption) (*UpdateConsumer_Response, error) {
	out := new(UpdateConsumer_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/UpdateConsumer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSellerByClientAccountId(ctx context.Context, in *GetSellerByClientAccountId_Request, opts ...grpc.CallOption) (*GetSellerByClientAccountId_Response, error) {
	out := new(GetSellerByClientAccountId_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetSellerByClientAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSellersByTags(ctx context.Context, in *GetSellersByTags_Request, opts ...grpc.CallOption) (*GetSellersByTags_Response, error) {
	out := new(GetSellersByTags_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetSellersByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterSeller(ctx context.Context, in *RegisterSeller_Request, opts ...grpc.CallOption) (*RegisterSeller_Response, error) {
	out := new(RegisterSeller_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/RegisterSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSeller(ctx context.Context, in *UpdateSeller_Request, opts ...grpc.CallOption) (*UpdateSeller_Response, error) {
	out := new(UpdateSeller_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSellerSetting(ctx context.Context, in *UpdateSellerSetting_Request, opts ...grpc.CallOption) (*UpdateSellerSetting_Response, error) {
	out := new(UpdateSellerSetting_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/UpdateSellerSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsersList(ctx context.Context, in *GetUsersList_Request, opts ...grpc.CallOption) (*GetUsersList_Response, error) {
	out := new(GetUsersList_Response)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserByClientAccountId(context.Context, *GetUserByClientAccountId_Request) (*GetUserByClientAccountId_Response, error)
	GetUserById(context.Context, *GetUserById_Request) (*GetUserById_Response, error)
	//CONSUMER
	GetConsumerByClientAccountId(context.Context, *GetConsumerByClientAccountId_Request) (*GetConsumerByClientAccountId_Response, error)
	RegisterConsumer(context.Context, *RegisterConsumer_Request) (*RegisterConsumer_Response, error)
	UpdateConsumer(context.Context, *UpdateConsumer_Request) (*UpdateConsumer_Response, error)
	//SELLER
	GetSellerByClientAccountId(context.Context, *GetSellerByClientAccountId_Request) (*GetSellerByClientAccountId_Response, error)
	GetSellersByTags(context.Context, *GetSellersByTags_Request) (*GetSellersByTags_Response, error)
	RegisterSeller(context.Context, *RegisterSeller_Request) (*RegisterSeller_Response, error)
	UpdateSeller(context.Context, *UpdateSeller_Request) (*UpdateSeller_Response, error)
	UpdateSellerSetting(context.Context, *UpdateSellerSetting_Request) (*UpdateSellerSetting_Response, error)
	//ADMIN
	GetUsersList(context.Context, *GetUsersList_Request) (*GetUsersList_Response, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserByClientAccountId(context.Context, *GetUserByClientAccountId_Request) (*GetUserByClientAccountId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByClientAccountId not implemented")
}
func (UnimplementedUserServiceServer) GetUserById(context.Context, *GetUserById_Request) (*GetUserById_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) GetConsumerByClientAccountId(context.Context, *GetConsumerByClientAccountId_Request) (*GetConsumerByClientAccountId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerByClientAccountId not implemented")
}
func (UnimplementedUserServiceServer) RegisterConsumer(context.Context, *RegisterConsumer_Request) (*RegisterConsumer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConsumer not implemented")
}
func (UnimplementedUserServiceServer) UpdateConsumer(context.Context, *UpdateConsumer_Request) (*UpdateConsumer_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumer not implemented")
}
func (UnimplementedUserServiceServer) GetSellerByClientAccountId(context.Context, *GetSellerByClientAccountId_Request) (*GetSellerByClientAccountId_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByClientAccountId not implemented")
}
func (UnimplementedUserServiceServer) GetSellersByTags(context.Context, *GetSellersByTags_Request) (*GetSellersByTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellersByTags not implemented")
}
func (UnimplementedUserServiceServer) RegisterSeller(context.Context, *RegisterSeller_Request) (*RegisterSeller_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSeller not implemented")
}
func (UnimplementedUserServiceServer) UpdateSeller(context.Context, *UpdateSeller_Request) (*UpdateSeller_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (UnimplementedUserServiceServer) UpdateSellerSetting(context.Context, *UpdateSellerSetting_Request) (*UpdateSellerSetting_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerSetting not implemented")
}
func (UnimplementedUserServiceServer) GetUsersList(context.Context, *GetUsersList_Request) (*GetUsersList_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersList not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserByClientAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByClientAccountId_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByClientAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetUserByClientAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByClientAccountId(ctx, req.(*GetUserByClientAccountId_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*GetUserById_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetConsumerByClientAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerByClientAccountId_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetConsumerByClientAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetConsumerByClientAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetConsumerByClientAccountId(ctx, req.(*GetConsumerByClientAccountId_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConsumer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/RegisterConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterConsumer(ctx, req.(*RegisterConsumer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumer_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/UpdateConsumer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateConsumer(ctx, req.(*UpdateConsumer_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSellerByClientAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByClientAccountId_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSellerByClientAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetSellerByClientAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSellerByClientAccountId(ctx, req.(*GetSellerByClientAccountId_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSellersByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellersByTags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSellersByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetSellersByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSellersByTags(ctx, req.(*GetSellersByTags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSeller_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/RegisterSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterSeller(ctx, req.(*RegisterSeller_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeller_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSeller(ctx, req.(*UpdateSeller_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSellerSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerSetting_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSellerSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/UpdateSellerSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSellerSetting(ctx, req.(*UpdateSellerSetting_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersList_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsersList(ctx, req.(*GetUsersList_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userService.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByClientAccountId",
			Handler:    _UserService_GetUserByClientAccountId_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "GetConsumerByClientAccountId",
			Handler:    _UserService_GetConsumerByClientAccountId_Handler,
		},
		{
			MethodName: "RegisterConsumer",
			Handler:    _UserService_RegisterConsumer_Handler,
		},
		{
			MethodName: "UpdateConsumer",
			Handler:    _UserService_UpdateConsumer_Handler,
		},
		{
			MethodName: "GetSellerByClientAccountId",
			Handler:    _UserService_GetSellerByClientAccountId_Handler,
		},
		{
			MethodName: "GetSellersByTags",
			Handler:    _UserService_GetSellersByTags_Handler,
		},
		{
			MethodName: "RegisterSeller",
			Handler:    _UserService_RegisterSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _UserService_UpdateSeller_Handler,
		},
		{
			MethodName: "UpdateSellerSetting",
			Handler:    _UserService_UpdateSellerSetting_Handler,
		},
		{
			MethodName: "GetUsersList",
			Handler:    _UserService_GetUsersList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user-service/user.proto",
}
